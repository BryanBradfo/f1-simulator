


public class Ecurie {
	private String nom;
	private String description;
	private String[] sponsors;
	private int budget;
	private int classement;
	private double exp; // a changer pour la classe
	
	/** Deux pilotes propres à chaque écurie
	 */
	private Pilote[] pilotes;
	
	/** L'écurie a un modèle améliorable de voiture, les pilotes commencent chaque course avec une voiture ayant ces mêmes caractéristiques.
	 */
	private Voiture voiture;
	
	
	public Ecurie(String nom, String description, String[] sponsors, int budget, int classement,Pilote p1, Pilote p2, Voiture v) {
		this.nom = nom;
		this.description = description;
		this.sponsors = sponsors;
		this.budget = budget;
		this.classement = classement;
		this.exp = 0;
		this.pilotes = new Pilote[2];
//		this.voiture = new Voiture(v.getMarque(), v.getPoids(), v.getIndicesPerformances(), false, p1); // Changer quand la classe Voiture n'est plus abstraite
	}
	
	// Getters
	/** Renvoie le nom de l'écurie choisi par le programmeur
	 * @return nom de l'écurie
	 */
	public String getNom() {
		return this.nom;
	}

	/** Renvoie des informations historique de l'écurie :
	 * La date de création, etc...
	 * @return description de l'écurie
	 */
	public String getDescription() {
		return this.description;
	}
	
	/** Renvoie le tableau des sponsors de l'écurie
	 * @return tableau de sponsors
	 */
	public String[] getSponsors() {
		return this.sponsors;
	}
	
	/** Renvoie le budget de l'écurie
	 * @return budget
	 */
	public int getBudget() {
		return this.budget;
	}
	
	/**Renvoie le classement de l'écurie 
	 * @return classement
	 */
	public int getClassement() {
		return this.classement;
	}
	
	/**Renvoie les deux pilotes associés à l'écurie
	 * @return tableau de pilote
	 */
	public Pilote[] getPilotes() {
		return this.pilotes;
	}
	
	/**Renvoie la voiture associée à l'écurie
	 * @return voiture
	 */
	public Voiture getVoiture() {
		 return this.getVoiture();
	}
	
	// Méthodes
	/**Calcul le budget disponible de l'écurie à partir de son budget actuel et son classement
	 * 
	 * @return le nouveau budget
	 */
	public int calculerBudget() {
		return this.budget + this.classement;
	}
	
	/**Calcul le gain d'expérience de l'écurie après la course
	 * @param exp
	 */
	public void gagnerExperience(double exp) {
		this.exp += exp;//.Gagne(exp);
	}
	
	/** Calcul le boost d'expérience de l'écurie en fonction de son niveau actuel et de son classement
	 * Utilisé par gagnerExperience
	 * @return boost
	 */
	private double calculerBoost() {
		return this.classement + this.exp;//.getNiveau();
	}
	
	//public void choixPilote(Pilote[] p) {
		
	//}
	
	//public void choixVoiture(Voiture[] v) {
	
	//}
	
}
