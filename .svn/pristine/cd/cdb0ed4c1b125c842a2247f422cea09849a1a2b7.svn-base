package MVC_interface_graphique.Contrôle;

import java.awt.*;
import javax.swing.*;


import MVC_interface_graphique.Modèle.ModeleMenuSave;
import MVC_interface_graphique.Vue.VueBoutonMenuSave;
import MVC_interface_graphique.Vue.VueMenuSave;


/** Cette classe crée un JPanel contenant les différents boutons du Menu de sauvegarde
 * 
 * @author Timothée Blanchy
 * @version 1.3
 *
 */
public class ControleMenuSave extends JPanel {
	
	private ModeleMenuSave modele;
	private VueMenuSave vue;
	

	public ControleMenuSave(ModeleMenuSave modele, VueMenuSave vue) {
		super(new BorderLayout());
		
		this.modele = modele;
		this.vue = vue;
		VueBoutonMenuSave vueBoutons[] = vue.getBoutonVue();
		
		JPanel pSave = new JPanel();
		JPanel pBas = new JPanel();
		
		JButton bRet = new JButton("Retour au menu");
		JButton bSup = new JButton();
		JButton b1 = new JButton();
		JButton b2 = new JButton();
		JButton b3 = new JButton();
		
		b1.add(vueBoutons[0]);
		b2.add(vueBoutons[1]);
		b3.add(vueBoutons[2]);
		bSup.add(vue.getBoutonDelMode());
		
		pSave.setLayout(new BorderLayout());
		pSave.add(b1, BorderLayout.NORTH);
		pSave.add(b2, BorderLayout.CENTER);
		pSave.add(b3, BorderLayout.SOUTH);
		
		pBas.setLayout(new BorderLayout());
		pBas.add(bSup, BorderLayout.WEST);
		pBas.add(bRet, BorderLayout.EAST);
		
		this.add(pSave, BorderLayout.CENTER);
		this.add(pBas, BorderLayout.SOUTH);
		
		bRet.addActionListener(ev -> modele.goMenuLancement());
		bSup.addActionListener(ev -> {
			modele.changeDelMode();
			vue.mettreAJour();
		});
		b1.addActionListener(ev -> this.boutonSaveListener(0));
		b2.addActionListener(ev -> this.boutonSaveListener(1));
		b3.addActionListener(ev -> this.boutonSaveListener(2));
		
	}
	
	private void boutonSaveListener(int num) {
		if (modele.isDelMode()) {
			if (!modele.isEmpty(num)) {
				modele.delSauvegarde(num);
				modele.changeDelMode();
				vue.mettreAJour();
			} 
		} else if (modele.isEmpty(num)) {
			modele.creerSauvegarde(num);
			vue.mettreAJour();
		} else {
			this.modele.goMenuPrincipal(num);
		}
	}
	

}
